<?php

use Retailred\Storefront\Model\Config;

/** @var Retailred\Storefront\Block\Product $this */

/** @var Retailred\Storefront\Helper\Data $helper */
$helper = $this->helper(Retailred\Storefront\Helper\Data::class);

if ($helper->getConfig(Config::XML_PATH_GENERAL_RENDER) === Config::RENDER_DISABLED) {
    return;
}

$isLiveInventory = $helper->getConfig(Config::XML_PATH_GENERAL_RENDER) === Config::RENDER_LIVE_INVENTORY;
$liveInventoryMode = $helper->getConfig(Config::XML_PATH_GENERAL_RENDER_MODE);
$terms = $helper->getConfig(Config::XML_PATH_GENERAL_TERMS_LINK);
$privacy = $helper->getConfig(Config::XML_PATH_GENERAL_PRIVACY_LINK);
$localization = $helper->getConfig(Config::XML_PATH_DESIGN_TRANSLATIONS);

?>

<script type='text/javascript' src='https://cdn.retail.red/omni/retailred-storefront-library-v1.js'></script>
<script type="text/javascript">
  require([
    'jquery',
    'Magento_Catalog/js/product/storage/storage-service',
    'Magento_Customer/js/customer-data',
    'domReady!'
  ], function ($, storageService, customerData) {
    var productData = <?= json_encode($this->getProductsConfig()) ?>;
    var $productAddToCartForm = $('#product_addtocart_form')

    function getSelectedProduct () {
      var products = storageService.getStorage('product_data_storage').getDataFromLocalStorage()
      var productId = $productAddToCartForm.find('input[name=product]').val()
      var product = products[productId]

      var swatches = $('.swatch-opt').data('mage-SwatchRenderer')
      var optionsMap = swatches ? swatches.optionsMap : {}

      var selectedOptions = $('.swatch-option.selected').map(function (i, el) {
        var $el = $(el);
        var $swatchAttribute = $el.closest('.swatch-attribute');
        var attributeId = $swatchAttribute.data('attribute-id') || $swatchAttribute.attr('attribute-id')

        return {
          option: {
            code: attributeId.toString(),
            label: $swatchAttribute.find('.swatch-attribute-label').text(),
          },
          value: {
            id: ($el.data('option-id') || $el.attr('option-id')).toString(),
            label: $el.data('option-label') || $el.attr('option-label'),
          },
        }
      }).map(function (i, el) {
        el.value.products = optionsMap[el.option.code][el.value.id].products
        return el
      }).get()

      var processVariant = selectedOptions.length > 0 && selectedOptions.length === Object.keys(optionsMap).length;

      // Get variant id
      var variantId = !processVariant
        ? null
        : selectedOptions
          .map(function (entry) {
            return entry.value
          })
          .reduce(function (acc, value) {
            // Init with products from first option
            if (acc === null) {
              acc = value.products || []
            } else {
              // Remove products that don't match with the current value products
              acc = acc.filter(function (variantId) {
                return (value.products || []).indexOf(variantId) !== -1
              })
            }
            return acc
          }, null)
          .reduce(function (r, variantId) {
            return variantId || ''
          }, null)

      var imageUrl = product.images[0].url;
      if (variantId) {
        var images = swatches.options.jsonConfig.images[variantId];
        if (images.length > 0) {
          imageUrl = images[0].img;
        }
      }

      var selectedProduct = productData[variantId || productId];

      return {
        /**
         * Do not send configurable product or auto-detected product.
         * Only explicit user selection
         */
        code: selectedProduct.type === 'standard' ? selectedProduct.number : null,
        imageUrl: imageUrl,
        name: product.name,
        identifiers: productData[variantId || productId].identifiers,
        options: selectedOptions.map(function (opt) {
          return{
            code: (opt.option.code || opt.option.id).toString(),
            name: opt.option.label.toString(),
            value: {
              code: (opt.value.code || opt.value.id).toString(),
              name: opt.value.label.toString()
            }
          };
        }),
        price: Number($('[data-price-type="finalPrice"]').data('priceAmount')),
        quantity: Number($productAddToCartForm.find('input[name=qty]').val()),
        currencyCode: '<?= $helper->getCurrencyCode() ?>'
      };
    }

    function initRetailred () {
      try {
         <?php if (!$localization) : ?>
         var localization = {};
         <?php else : ?>
         var localization = <?= $localization ?>;
         <?php endif; ?>

        localization.localeCode = <?= json_encode($helper->getLocaleCode()) ?>;
        localization.countries = <?= json_encode(explode(',', $helper->getConfig(Config::XML_PATH_API_COUNTRIES))) ?>;

        var customer = customerData.get('customer')();
        var names = [];
        if (customer && customer.fullname) {
          names = customer.fullname.split(' ');
        }

        var retailred = window.RetailRedStorefront.create({
          apiKey: '<?= $helper->getConfig(Config::XML_PATH_API_APIKEY) ?>',
          apiStage: '<?= $helper->getConfig(Config::XML_PATH_API_API_STAGE) ?>',
          useGeolocationImmediately: <?= $helper->getConfig(Config::XML_PATH_API_USE_GEOLOCATION_IMMEDIATELY) === '1' ? 'true' : 'false' ?>,
          browserHistory: <?= $helper->getConfig(Config::XML_PATH_API_BROWSER_HISTORY) === '1' ? 'true' : 'false' ?>,
          testMode: <?= $helper->getConfig(Config::XML_PATH_API_TEST_MODE) === '1' ? 'true' : 'false' ?>,
          unitSystem: '<?= $helper->getConfig(Config::XML_PATH_API_UNIT_SYSTEM) ?>',
          localization: localization,
          inventory: {
            hideNumber: <?= $helper->getConfig(Config::XML_PATH_GENERAL_INVENTORY_HIDE_NUMBER) === '1' ? 'true' : 'false' ?>,
            showExactUntil: <?= $helper->getConfig(Config::XML_PATH_GENERAL_INVENTORY_SHOW_EXACT_UNTIL) ?: 'null' ?>,
            showLowUntil: <?= $helper->getConfig(Config::XML_PATH_GENERAL_INVENTORY_SHOW_LOW_UNTIL) ?: 'null' ?>
          },
          legal: {
             terms: <?= $terms ? json_encode($terms) : 'null' ?>,
             privacy: <?= $privacy ? json_encode($privacy): 'null' ?>,
          },
          customer: {
            code: customer.data_id,
            firstName: names[0],
            lastName: names[1],
            phone: null,
            emailAddress: null,
          },
          product: getSelectedProduct(),
          templates: {
            customTemplates: {
              reserveButton: '<button id="rr-omni-reserve-button" class="action primary tocart">{{t "reserveButton.title" }}</button>'
            }
          }
        });

        $productAddToCartForm.find('input[name=qty]').change(function () {
          retailred.updateConfig({
            product: {
              quantity: Number($(this).val()),
            },
          })
        });

        $('[data-role=priceBox]').on('updatePrice', function () {
          /** Swatches module dispatch this event */
          retailred.updateConfig({
            product: getSelectedProduct(),
          })
        });

        <?php if (!$isLiveInventory) : ?>
        retailred.renderReserveButton('#rr-reserve-button', {}, function(next) {
          if ($productAddToCartForm.valid && $productAddToCartForm.valid()) {
            next();
          }
        });
        <?php endif; ?>

        <?php if ($isLiveInventory) : ?>
        retailred.renderLiveInventory('#rr-live-inventory', {
          variant: '<?= $liveInventoryMode ?>'
        });
        <?php endif; ?>

      } catch (e) {
        console.error(e);
      }
    }

    storageService.onStorageInit('product_data_storage', function () {
      setTimeout(initRetailred, 500);
    });
});

</script>
